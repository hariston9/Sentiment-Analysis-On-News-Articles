# -*- coding: utf-8 -*-
"""Sentiment Analysis on News Articles.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Sw0YxY9qvVw6LYsJ-TdrzZNci4FMSuZn
"""

# Description : This program analysis the sentiment about crypto using news headlines and python

# Import the libraries
import pandas as pd
import numpy as np
from textblob import TextBlob
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

#!pip install pygooglenews

from GoogleNews import GoogleNews
#from newspaper import Article
import pandas as pd

!pip install GoogleNews
!pip install newspaper3k

!pip install newspaper

!pip install GoogleNews

googlenews=GoogleNews(start='05/01/2020',end='05/31/2020')
googlenews.search('Football')
result=googlenews.result()
df=pd.DataFrame(result)
print(df.head())

# Store the data
#df=df.read_csv('Cryptocurrency_News.csv')

#Create a function to get the polarity 
def getPolarity(text):
  return TextBlob(text).sentiment.polarity 

# Create one new column called 'Polarity'

df['Polarity']=df['title'].apply(getPolarity)

#df['Polarity']=df.apply(getPolarity)
#Showt he data set with the new column
df.head(5)

# Create a function to compute negative, neutral and positive sentiments
def getSentiment(score):
  if score<0:
    return 'Negative'
  elif score == 0:
    return 'Neutral'
  else:
    return 'Positive'


# Create a new column to store the sentiment
df['Sentiment']= df['Polarity'].apply(getSentiment)

#Plot and visualize the sntiment count
plt.title('Sentiment Analysis')
df['Sentiment'].value_counts().plot(kind='bar')
plt.xlabel('Sentiments')
plt.ylabel('Counts')
plt.show()

# Plot ths sum of the polarity of each date
plt.figure(figsize=(12.33, 4.5))
plt.title('Sentiment Sum Over Time')
Polarity=df.groupby(['date']).sum()['Polarity']
plt.plot(Polarity.index, Polarity)

# Show the sum of the polarity for each date
Polarity

# Get the count of each ariticle per date
polarity_count=df.groupby(['date']).count()['Polarity']
#Show the data
polarity_count

# Show the average sentiment for each day 

polarity_avg=Polarity/ polarity_count
polarity_avg

#Plot the average sentiment over time
plt.figure(figsize=(12.33,4.5))
plt.title('Sentiment Analysis')
plt.plot(polarity_avg.index, polarity_avg)

"""Additional code to get Data"""

!pip install newspaper

!pip install newspaper3k

from newspaper import Article

from GoogleNews import GoogleNews
from newspaper import Article
from newspaper import Config
import pandas as pd
import nltk

for ind in df.index:
    dict={}
    article = Article(df['link'][ind])
    article.download()
    article.parse()
    article.nlp()
    dict['Date']=df['date'][ind]
    dict['Media']=df['media'][ind]
    dict['Title']=article.title
    dict['Article']=article.text
    dict['Summary']=article.summary
    list.append(dict)
news_df=pd.DataFrame(list)
#news_df.to_excel("articles.xlsx")

for i in range(2,20):
    googlenews.getpage(i)
    result=googlenews.result()
    df=pd.DataFrame(result)
list=[]

nltk.download('punkt')

from GoogleNews import GoogleNews
from newspaper import Article
from newspaper import Config
import pandas as pd
import nltk
#config will allow us to access the specified url for which we are #not authorized. Sometimes we may get 403 client error while parsing #the link to download the article.
nltk.download('punkt')

user_agent = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'
config = Config()
config.browser_user_agent = user_agent
googlenews=GoogleNews(start='05/01/2020',end='05/31/2020')
googlenews.search('Coronavirus')
result=googlenews.result()
df=pd.DataFrame(result)
print(df.head())
for i in range(2,20):
    googlenews.getpage(i)
    result=googlenews.result()
    df=pd.DataFrame(result)
list=[]
for ind in df.index:
    dict={}
    article = Article(df['link'][ind],config=config)
    article.download()
    article.parse()
    article.nlp()
    dict['Date']=df['date'][ind]
    dict['Media']=df['media'][ind]
    dict['Title']=article.title
    dict['Article']=article.text
    dict['Summary']=article.summary
    list.append(dict)
news_df=pd.DataFrame(list)
news_df.to_excel("articles.xlsx")